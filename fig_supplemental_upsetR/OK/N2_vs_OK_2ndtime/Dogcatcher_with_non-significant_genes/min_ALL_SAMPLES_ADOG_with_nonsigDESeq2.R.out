
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> 
> ##########################################################################################
> ##########################################################################################
> ########DESeq2
> 
> library(DESeq2)
Loading required package: S4Vectors
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min


Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomicRanges
Loading required package: GenomeInfoDb
Loading required package: SummarizedExperiment
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians


Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following object is masked from ‘package:base’:

    apply

> library("BiocParallel")
> register(SerialParam())
> register(MulticoreParam(4))
> 
> ##Read in the count matrix
> cts <- as.matrix(read.csv("OK_LFC_FLIPPED_DOG_2ndtime/N2_vs_OK_2ndtime/Dogcatcher_with_non-significant_genes/min_ALL_SAMPLES_ADOG_with_nonsig_Dogcatcher_Rsubread_sense_normalized_rRNA_star.txt",sep="\t",row.names=1))
> coldata <- read.table("OK_LFC_FLIPPED_DOG_2ndtime/initial_Rsubread/col_data.txt")
> 
> #########################################
> #      Make your Count data match col Input
> all(rownames(coldata) %in% colnames(cts))
[1] TRUE
> all(rownames(coldata) == colnames(cts))
[1] TRUE
> cts <- cts[, rownames(coldata)]
> all(rownames(coldata) == colnames(cts))
[1] TRUE
> #########################################
> 
> ##########################################
> #Initialize list of 1's for size factors
> coldata_rows = nrow(coldata)                      #Get number of rows
> mylist = list (SF = integer(coldata_rows) )       #Make list of 0's
> mylist$SF = mylist$SF + 1                         #Add one to list
> ##########################################
> 
> 
> 
> 
> #LRT test
> dds <- DESeqDataSetFromMatrix(countData = cts,
+                               colData = coldata,
+                               design= ~ assay + condition + assay:condition)
> 
> 
> sizeFactors(dds)=mylist$SF    #Makes the size factors for dds from the col_data length
> 
> 
> dds <- dds[ rowSums(counts(dds)) > 2,]   #Take everything over 2 because we added one in the normalization python steps
> 
> dds$condition <- factor(dds$condition, levels=c("T","C"))
> dds <- DESeq(dds, test="LRT", reduced= ~ assay + condition, parallel = TRUE)
using pre-existing size factors
estimating dispersions
gene-wise dispersion estimates: 4 workers
mean-dispersion relationship
final dispersion estimates, fitting model and testing: 4 workers
> res <- results(dds)
> write.csv(res, file="OK_LFC_FLIPPED_DOG_2ndtime/N2_vs_OK_2ndtime/Dogcatcher_with_non-significant_genes/min_ALL_SAMPLES_ADOG_with_nonsig_Dogcatcher_DESeq2_sense.csv")
> #############################################
> 
> 
> 
> 
> 
> cts <- as.matrix(read.csv("OK_LFC_FLIPPED_DOG_2ndtime/N2_vs_OK_2ndtime/Dogcatcher_with_non-significant_genes/min_ALL_SAMPLES_ADOG_with_nonsig_Dogcatcher_Rsubread_antisense_normalized_rRNA_star.txt",sep="\t",row.names=1))
> 
> 
> 
> #LRT test
> dds <- DESeqDataSetFromMatrix(countData = cts,
+                               colData = coldata,
+                               design= ~ assay + condition + assay:condition)
> 
> 
> sizeFactors(dds)=mylist$SF    #Makes the size factors for dds from the col_data length
> 
> 
> dds <- dds[ rowSums(counts(dds)) > 2,]   #Take everything over 2 because we added one in the normalization python steps
> 
> dds$condition <- factor(dds$condition, levels=c("T","C"))
> dds <- DESeq(dds, test="LRT", reduced= ~ assay + condition, parallel = TRUE)
using pre-existing size factors
estimating dispersions
gene-wise dispersion estimates: 4 workers
mean-dispersion relationship
final dispersion estimates, fitting model and testing: 4 workers
> res <- results(dds)
> write.csv(res, file="OK_LFC_FLIPPED_DOG_2ndtime/N2_vs_OK_2ndtime/Dogcatcher_with_non-significant_genes/min_ALL_SAMPLES_ADOG_with_nonsig_Dogcatcher_DESeq2_antisense.csv")
> #############################################
> 
> proc.time()
   user  system elapsed 
 12.837   1.209  28.752 
